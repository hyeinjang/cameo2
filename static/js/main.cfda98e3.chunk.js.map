{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["About","props","console","log","Movie","id","title","summary","poster","year","genres","posterLarge","to","pathname","state","className","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","large_cover_image","React","Component","Detail","location","history","undefined","push","Navigation","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfda98e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction About(props){\r\n    console.log(props)\r\n    return(\r\n        <h2>I built it because I love movies!</h2>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport './Movie.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Movie({id, title, summary, poster, year, genres, posterLarge}){\r\n    return (\r\n        <Link to={{\r\n            pathname: `/movie/${id}`,\r\n            state: {\r\n                id,\r\n                title,\r\n                summary,\r\n                poster,\r\n                year,\r\n                genres,\r\n                posterLarge\r\n            }\r\n        }}>\r\n            <div className=\"movie\">\r\n                <img src={poster} alt={title} title={title}></img>\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\">{title}</h3>\r\n                    <h5 className=\"movie__year\">{year}</h5>\r\n                    <ul className=\"movie__genres\">\r\n                        {genres.map((genre, index) => (\r\n                            <li key={index} className=\"genre\">{genre}</li>\r\n                        ))}\r\n                    </ul>\r\n                    <p className=\"movie__summary\">{summary.slice(0,200)}...</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: Proptypes.number.isRequired,\r\n    title: Proptypes.string.isRequired,\r\n    summary: Proptypes.string.isRequired,\r\n    poster: Proptypes.string.isRequired,\r\n    year: Proptypes.number.isRequired,\r\n    genres: Proptypes.arrayOf(Proptypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport './Home.css';\r\n// import PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport Movie from '../components/Movie'\r\n\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  }\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: {movies}\r\n      }\r\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n    this.setState({ movies, isLoading: false });\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getMovies();\r\n  }\r\n\r\n  render(){\r\n    const {isLoading, movies} = this.state;\r\n    return(\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n          ) : ( movies.map(movie => {\r\n            \r\n            return(\r\n              <Movie\r\n              key={movie.id}\r\n              id={movie.id}\r\n              title={movie.title}\r\n              summary={movie.summary}\r\n              poster={movie.medium_cover_image}\r\n              year={movie.year}\r\n              genres={movie.genres}\r\n              posterLarge={movie.large_cover_image}\r\n              ></Movie>\r\n             )\r\n           })\r\n          )\r\n        }        \r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './Detail.css';\r\n\r\n\r\nclass Detail extends React.Component{\r\n    componentDidMount(){\r\n        const {location, history} = this.props;\r\n        console.log(this.props)\r\n        if(location.state === undefined){\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n    render(){\r\n        const {location} = this.props;\r\n        if(location.state){\r\n            return (\r\n                <article className=\"detail-movie\">\r\n                    <img \r\n                        src={location.state.posterLarge} \r\n                        alt={location.state.title} \r\n                        title={location.state.title}>\r\n                    </img>\r\n                    <div className=\"detail-movie__desc\">\r\n                        <h3>{location.state.title}</h3>\r\n                        <ul>\r\n                            {location.state.genres.map((genre, index) => {\r\n                                return <li key={index}>{genre}</li>\r\n                            })}\r\n                        </ul>\r\n                        <p>{location.state.summary}</p>\r\n                    </div>\r\n                    \r\n                </article>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nfunction Navigation(){\r\n    return(\r\n        <nav>\r\n            <ul>\r\n                <li><Link to=\"/\" className=\"nav__list\">Home</Link></li>\r\n                <li><Link to={{\r\n                    pathname: \"/about\"\r\n                }} className=\"nav__list\">About</Link></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport About from './routes/About';\r\nimport Home from './routes/Home';\r\nimport Detail from './routes/Detail';\r\nimport Navigation from './components/Navigation';\r\n\r\nfunction App(){\r\n  return(\r\n    <HashRouter>\r\n        <Navigation></Navigation>\r\n        <Route path=\"/\" exact={true} component={Home} />\r\n        <Route path=\"/about\" exact={true} component={About} />\r\n        <Route path=\"/movie/:id\" component={Detail}/>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}